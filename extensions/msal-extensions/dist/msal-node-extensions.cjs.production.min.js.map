{"version":3,"file":"msal-node-extensions.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/persistence/DataProtectionScope.ts","../src/error/PersistenceError.ts","../src/lock/CrossPlatformLock.ts","../src/utils/Constants.ts","../src/persistence/PersistenceCachePlugin.ts","../src/persistence/FilePersistence.ts","../src/dpapi/Dpapi.ts","../src/persistence/FilePersistenceWithDataProtection.ts","../src/persistence/KeychainPersistence.ts","../src/persistence/LibSecretPersistence.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport enum DataProtectionScope {\r\n    CurrentUser = \"CurrentUser\",\r\n    LocalMachine = \"LocalMachine\",\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport class PersistenceError extends Error {\r\n\r\n    // Short string denoting error\r\n    errorCode: string;\r\n    // Detailed description of error\r\n    errorMessage: string;\r\n\r\n    constructor(errorCode: string, errorMessage: string) {\r\n        const errorString = errorMessage ? `${errorCode}: ${errorMessage}` : errorCode;\r\n        super(errorString);\r\n        Object.setPrototypeOf(this, PersistenceError.prototype);\r\n\r\n        this.errorCode = errorCode;\r\n        this.errorMessage = errorMessage;\r\n        this.name = \"PersistenceError\";\r\n    }\r\n\r\n    static createFileSystemError(errorCode: string, errorMessage: string): PersistenceError {\r\n        return new PersistenceError(errorCode, errorMessage);\r\n    }\r\n\r\n    static createLibSecretError(errorCode: string, errorMessage: string): PersistenceError {\r\n        const updatedErrorMessage = `Error accessing Gnome Keyring: ${errorCode}- ${errorMessage}`;\r\n        return new PersistenceError(\"GnomeKeyringError\", updatedErrorMessage);\r\n    }\r\n\r\n    static createKeychainPersistenceError(errorCode: string, errorMessage: string): PersistenceError {\r\n        const updatedErrorMessage = `Error accessing Keychain: ${errorCode}- ${errorMessage}`;\r\n        return new PersistenceError(\"KeychainError\", updatedErrorMessage);\r\n    }\r\n\r\n    static createFilePersistenceWithDPAPIError(errorCode: string,errorMessage: string): PersistenceError {\r\n        const updatedErrorMessage = `Error accessing DPAPI encrypted file: ${errorCode}- ${errorMessage}`;\r\n        return new PersistenceError(\"DPAPIEncryptedFileError\", updatedErrorMessage);\r\n    }\r\n\r\n    static createCrossPlatformLockError(errorCode: string, errorMessage: string): PersistenceError {\r\n        const updatedErrorMessage = `Error acquiring lock: ${errorCode}- ${errorMessage}`;\r\n        return new PersistenceError(\"CrossPlatformLockError\", updatedErrorMessage);\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { open, close, write, unlink } from \"fs\";\r\nimport { promisify } from \"util\";\r\nimport { pid } from \"process\";\r\nimport { CrossPlatformLockOptions } from \"./CrossPlatformLockOptions\";\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { PersistenceError } from \"../error/PersistenceError\";\r\n\r\n/**\r\n * Cross-process lock that works on all platforms.\r\n */\r\nexport class CrossPlatformLock {\r\n\r\n    private readonly lockFilePath: string;\r\n    private lockFileDescriptor: number;\r\n    private readonly retryNumber: number;\r\n    private readonly retryDelay: number;\r\n\r\n    constructor(lockFilePath:string, lockOptions?: CrossPlatformLockOptions) {\r\n        this.lockFilePath = lockFilePath;\r\n        this.retryNumber = lockOptions ? lockOptions.retryNumber : 500;\r\n        this.retryDelay = lockOptions ? lockOptions.retryDelay : 100;\r\n    }\r\n\r\n    public async lock(): Promise<void> {\r\n        const processId = pid.toString();\r\n        for (let tryCount = 0; tryCount < this.retryNumber; tryCount++)\r\n            try {\r\n                console.log(\"Pid \" + pid + \" trying to acquire lock\");\r\n                const openPromise = promisify(open);\r\n                this.lockFileDescriptor = await openPromise(this.lockFilePath, \"wx+\");\r\n                console.log(\"Pid \" + pid + \" acquired lock\");\r\n                const writePromise = promisify(write);\r\n                await writePromise(this.lockFileDescriptor, processId);\r\n                break;\r\n            } catch (err) {\r\n                if (err.code == Constants.EEXIST_ERROR) {\r\n                    console.log(err);\r\n                    await this.sleep(this.retryDelay);\r\n                } else {\r\n                    throw PersistenceError.createCrossPlatformLockError(err.code, err.message);\r\n                }\r\n            }\r\n    }\r\n\r\n    public async unlock(): Promise<void> {\r\n        try {\r\n            // delete lock file\r\n            const unlinkPromise = promisify(unlink);\r\n            await unlinkPromise(this.lockFilePath);\r\n            const closePromise = promisify(close);\r\n            await closePromise(this.lockFileDescriptor);\r\n        } catch(err){\r\n            if(err.code == Constants.ENOENT_ERROR){\r\n                console.log(\"Lockfile does not exist\");\r\n            } else {\r\n                throw PersistenceError.createCrossPlatformLockError(err.code, err.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    private sleep(ms): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const Constants = {\r\n\r\n    /**\r\n     * An existing file was the target of an operation that required that the target not exist\r\n     */\r\n    EEXIST_ERROR: \"EEXIST\",\r\n\r\n    /**\r\n     * No such file or directory: Commonly raised by fs operations to indicate that a component\r\n     * of the specified pathname does not exist. No entity (file or directory) could be found\r\n     * by the given path\r\n     */\r\n    ENOENT_ERROR: \"ENOENT\",\r\n\r\n    /**\r\n     * Default service name for using MSAL Keytar\r\n     */\r\n    DEFAULT_SERVICE_NAME: \"msal-node-extensions\",\r\n};\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPersistence } from \"../persistence/IPersistence\";\r\nimport { CrossPlatformLock } from \"../lock/CrossPlatformLock\";\r\nimport { CrossPlatformLockOptions } from \"../lock/CrossPlatformLockOptions\";\r\nimport { pid } from \"process\";\r\n\r\nexport class PersistenceCachePlugin {\r\n\r\n    public persistence: IPersistence;\r\n    public lastSync: number;\r\n    public currentCache: string;\r\n    public lockFilePath: string;\r\n\r\n    private crossPlatformLock: CrossPlatformLock;\r\n    private readonly lockOptions: CrossPlatformLockOptions;\r\n\r\n    constructor(persistence: IPersistence, lockOptions?: CrossPlatformLockOptions) {\r\n        this.persistence = persistence;\r\n        this.lockFilePath = `${this.persistence.getFilePath()}.lockfile`;\r\n        this.lastSync = 0;\r\n        this.currentCache = null;\r\n        this.lockOptions = lockOptions;\r\n    }\r\n\r\n    public async readFromStorage(): Promise<string> {\r\n        console.log(\"Reading from storage\");\r\n        if (await this.persistence.reloadNecessary(this.lastSync) || this.currentCache == null) {\r\n            try {\r\n                console.log(\"Reload necessary.  Last sync time: \" + this.lastSync);\r\n                this.crossPlatformLock = new CrossPlatformLock(this.lockFilePath, this.lockOptions);\r\n                await this.crossPlatformLock.lock();\r\n\r\n                this.currentCache = await this.persistence.load();\r\n                this.lastSync = new Date().getTime();\r\n                console.log(\"Last sync time updated to: \", this.lastSync);\r\n            } finally {\r\n                await this.crossPlatformLock.unlock();\r\n                delete this.crossPlatformLock;\r\n                console.log(\"Pid \" + pid + \" Released lock\");\r\n            }\r\n        }\r\n        return this.currentCache;\r\n    }\r\n\r\n    public async writeToStorage(callback: (diskState: string) => string): Promise<void> {\r\n        try {\r\n            console.log(\"Writing to storage\");\r\n            this.crossPlatformLock = new CrossPlatformLock(this.lockFilePath, this.lockOptions);\r\n            await this.crossPlatformLock.lock();\r\n\r\n            if(await this.persistence.reloadNecessary(this.lastSync)){\r\n                console.log(\"Reload necessary.  Last sync time: \" + this.lastSync);\r\n                this.currentCache = await this.persistence.load();\r\n                this.lastSync = new Date().getTime();\r\n                console.log(\"Last sync time updated to: \", this.lastSync);\r\n            }\r\n\r\n            this.currentCache = await callback(this.currentCache);\r\n            await this.persistence.save(this.currentCache);\r\n        } finally {\r\n            await this.crossPlatformLock.unlock();\r\n            console.log(\"Pid \" + pid + \" Released lock\");\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { writeFile, readFile, unlink, stat, mkdir, close, open } from \"fs\";\r\nimport { promisify } from \"util\";\r\nimport { dirname } from \"path\";\r\nimport { IPersistence } from \"./IPersistence\";\r\nimport { Constants } from \"../utils/Constants\";\r\nimport { PersistenceError } from \"../error/PersistenceError\";\r\n\r\nexport class FilePersistence implements IPersistence {\r\n\r\n    private filePath: string;\r\n\r\n    public static async create(fileLocation: string): Promise<FilePersistence> {\r\n        const filePersistence = new FilePersistence();\r\n        filePersistence.filePath = fileLocation;\r\n        await filePersistence.createCacheFile();\r\n        return filePersistence;\r\n    }\r\n\r\n    public async save(contents: string): Promise<void> {\r\n        const writeFilePromise = promisify(writeFile);\r\n        try {\r\n            await writeFilePromise(this.getFilePath(), contents, \"utf-8\");\r\n        } catch (err) {\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async saveBuffer(contents: Uint8Array): Promise<void> {\r\n        const writeFilePromise = promisify(writeFile);\r\n        try {\r\n            await writeFilePromise(this.getFilePath(), contents);\r\n        } catch (err) {\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async load(): Promise<string> {\r\n        const readFilePromise = promisify(readFile);\r\n        try {\r\n            return await readFilePromise(this.getFilePath(), \"utf-8\");\r\n        } catch (err) {\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    };\r\n\r\n    public async loadBuffer(): Promise<Uint8Array> {\r\n        const readFilePromise = promisify(readFile);\r\n        try {\r\n            return await readFilePromise(this.getFilePath());\r\n        } catch (err) {\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    };\r\n\r\n    public async delete(): Promise<boolean> {\r\n        const deleteFilePromise = promisify(unlink);\r\n        try {\r\n            await deleteFilePromise(this.getFilePath());\r\n            return true;\r\n        } catch (err) {\r\n            if (err.code == Constants.ENOENT_ERROR) {\r\n                // file does not exist, so it was not deleted\r\n                return false;\r\n            }\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public getFilePath(): string {\r\n        return this.filePath;\r\n    }\r\n\r\n    public async reloadNecessary(lastSync: number): Promise<boolean> {\r\n        return lastSync < await this.timeLastModified();\r\n    }\r\n\r\n    private async timeLastModified(): Promise<number> {\r\n        try {\r\n            const statPromise = promisify(stat);\r\n            const stats = await statPromise(this.filePath);\r\n            return stats.mtime.getTime();\r\n        } catch (err) {\r\n            if (err.code == Constants.ENOENT_ERROR) {\r\n                // file does not exist, so it's never been modified\r\n                return 0;\r\n            }\r\n            throw PersistenceError.createFileSystemError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    private async createCacheFile(): Promise<void> {\r\n        await this.createFileDirectory();\r\n        // File is created only if it does not exist\r\n        const closePromise = promisify(close);\r\n        const openPromise = promisify(open);\r\n        await closePromise(await openPromise(this.filePath, \"a\"))\r\n    }\r\n\r\n    private async createFileDirectory(): Promise<void> {\r\n        try {\r\n            const mkdirPromise = promisify(mkdir);\r\n            await mkdirPromise(dirname(this.filePath), {recursive: true});\r\n        } catch (err) {\r\n            if (err.code == Constants.EEXIST_ERROR) {\r\n                console.log(`Directory ${dirname(this.filePath)} \" already exists\"`);\r\n            } else {\r\n                throw PersistenceError.createFileSystemError(err.code, err.message);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport interface DpapiBindings{\r\n    protectData(dataToEncrypt: Uint8Array, optionalEntropy: Uint8Array, scope: string): Uint8Array\r\n    unprotectData(encryptData: Uint8Array, optionalEntropy: Uint8Array, scope: string): Uint8Array\r\n}\r\n\r\nexport var Dpapi: DpapiBindings = require(\"bindings\")(\"dpapi\");\r\nexport default Dpapi;\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { IPersistence } from \"./IPersistence\";\r\nimport { FilePersistence } from \"./FilePersistence\";\r\nimport { PersistenceError } from \"../error/PersistenceError\";\r\nimport { Dpapi } from \"../dpapi/Dpapi\";\r\nimport { DataProtectionScope } from \"./DataProtectionScope\";\r\n\r\nexport class FilePersistenceWithDataProtection implements IPersistence {\r\n\r\n    private filePersistence: FilePersistence;\r\n    private scope: DataProtectionScope;\r\n    private optionalEntropy: Uint8Array;\r\n\r\n    constructor(scope: DataProtectionScope, optionalEntropy?: string) {\r\n        this.scope = scope;\r\n        this.optionalEntropy = optionalEntropy ? Buffer.from(optionalEntropy, \"utf-8\") : null;\r\n    }\r\n\r\n    public static async create(\r\n        fileLocation: string,\r\n        scope: DataProtectionScope,\r\n        optionalEntropy?: string): Promise<FilePersistenceWithDataProtection> {\r\n\r\n        const persistence = new FilePersistenceWithDataProtection(scope, optionalEntropy);\r\n        persistence.filePersistence = await FilePersistence.create(fileLocation);\r\n        return persistence;\r\n    }\r\n\r\n    public async save(contents: string): Promise<void> {\r\n        try {\r\n            const encryptedContents = Dpapi.protectData(\r\n                Buffer.from(contents, \"utf-8\"),\r\n                this.optionalEntropy,\r\n                this.scope.toString());\r\n            await this.filePersistence.saveBuffer(encryptedContents);\r\n        } catch (err) {\r\n            throw PersistenceError.createFilePersistenceWithDPAPIError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async load(): Promise<string | null> {\r\n        try {\r\n            const encryptedContents = await this.filePersistence.loadBuffer();\r\n            // TODO use MSAL common util instead\r\n            if (typeof encryptedContents === \"undefined\" || !encryptedContents || 0 === encryptedContents.length) {\r\n                return null;\r\n            }\r\n            return Dpapi.unprotectData(\r\n                encryptedContents,\r\n                this.optionalEntropy,\r\n                this.scope.toString()).toString();\r\n        } catch (err) {\r\n            throw PersistenceError.createFilePersistenceWithDPAPIError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async delete(): Promise<boolean> {\r\n        return this.filePersistence.delete();\r\n    }\r\n\r\n    public async reloadNecessary(lastSync: number): Promise<boolean> {\r\n        return this.filePersistence.reloadNecessary(lastSync);\r\n    }\r\n\r\n    public getFilePath(): string {\r\n        return this.filePersistence.getFilePath();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { setPassword, getPassword, deletePassword } from \"keytar\";\r\nimport { FilePersistence } from \"./FilePersistence\";\r\nimport { IPersistence } from \"./IPersistence\";\r\nimport { PersistenceError } from \"../error/PersistenceError\";\r\n\r\nexport class KeychainPersistence implements IPersistence {\r\n\r\n    protected readonly serviceName;\r\n    protected readonly accountName;\r\n    private filePersistence: FilePersistence;\r\n\r\n    private constructor(serviceName: string, accountName: string) {\r\n        this.serviceName = serviceName;\r\n        this.accountName = accountName;\r\n    }\r\n\r\n    public static async create(\r\n        fileLocation: string,\r\n        serviceName: string,\r\n        accountName: string): Promise<KeychainPersistence> {\r\n\r\n        const persistence = new KeychainPersistence(serviceName, accountName);\r\n        persistence.filePersistence = await FilePersistence.create(fileLocation);\r\n        return persistence;\r\n    }\r\n\r\n    public async save(contents: string): Promise<void> {\r\n        try {\r\n            await setPassword(this.serviceName, this.accountName, contents);\r\n        } catch (err) {\r\n            throw PersistenceError.createKeychainPersistenceError(err.code, err.message);\r\n        }\r\n        // Write dummy data to update file mtime\r\n        await this.filePersistence.save(\"{}\");\r\n    }\r\n\r\n    public async load(): Promise<string | null> {\r\n        try{\r\n            return await getPassword(this.serviceName, this.accountName);\r\n        } catch(err){\r\n            throw PersistenceError.createKeychainPersistenceError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async delete(): Promise<boolean> {\r\n        try {\r\n            return await deletePassword(this.serviceName, this.accountName);\r\n        } catch (err) {\r\n            throw PersistenceError.createKeychainPersistenceError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async reloadNecessary(lastSync: number): Promise<boolean> {\r\n        return this.filePersistence.reloadNecessary(lastSync);\r\n    }\r\n\r\n    public getFilePath(): string {\r\n        return this.filePersistence.getFilePath();\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { setPassword, getPassword, deletePassword } from \"keytar\";\r\nimport { FilePersistence } from \"./FilePersistence\";\r\nimport { IPersistence } from \"./IPersistence\";\r\nimport { PersistenceError } from \"../error/PersistenceError\";\r\n\r\nexport class LibSecretPersistence implements IPersistence {\r\n\r\n    protected readonly serviceName;\r\n    protected readonly accountName;\r\n    private filePersistence: FilePersistence;\r\n\r\n    private constructor(serviceName: string, accountName: string) {\r\n        this.serviceName = serviceName;\r\n        this.accountName = accountName;\r\n    }\r\n\r\n    public static async create(\r\n        fileLocation: string,\r\n        serviceName: string,\r\n        accountName: string): Promise<LibSecretPersistence> {\r\n\r\n        const persistence = new LibSecretPersistence(serviceName, accountName);\r\n        persistence.filePersistence = await FilePersistence.create(fileLocation);\r\n        return persistence;\r\n    }\r\n\r\n    public async save(contents: string): Promise<void> {\r\n        try {\r\n            await setPassword(this.serviceName, this.accountName, contents);\r\n        } catch (err) {\r\n            throw PersistenceError.createLibSecretError(err.code, err.message);\r\n        }\r\n        // Write dummy data to update file mtime\r\n        await this.filePersistence.save(\"{}\");\r\n    }\r\n\r\n    public async load(): Promise<string | null> {\r\n        try {\r\n            return await getPassword(this.serviceName, this.accountName);\r\n        } catch (err) {\r\n            throw PersistenceError.createLibSecretError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async delete(): Promise<boolean> {\r\n        try {\r\n            return await deletePassword(this.serviceName, this.accountName);\r\n        } catch (err) {\r\n            throw PersistenceError.createLibSecretError(err.code, err.message);\r\n        }\r\n    }\r\n\r\n    public async reloadNecessary(lastSync: number): Promise<boolean> {\r\n        return this.filePersistence.reloadNecessary(lastSync);\r\n    }\r\n\r\n    public getFilePath(): string {\r\n        return this.filePersistence.getFilePath();\r\n    }\r\n}\r\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_catch","body","recover","_finallyRethrows","finalizer","Symbol","iterator","asyncIterator","DataProtectionScope","PersistenceError","errorCode","errorMessage","Object","setPrototypeOf","name","createFileSystemError","createLibSecretError","createKeychainPersistenceError","createFilePersistenceWithDPAPIError","createCrossPlatformLockError","Error","CrossPlatformLock","lockFilePath","lockOptions","retryNumber","retryDelay","lock","processId","pid","toString","tryCount","test","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_this2","console","log","openPromise","promisify","open","lockFileDescriptor","writePromise","write","err","code","sleep","message","unlock","unlinkPromise","unlink","_this4","closePromise","close","ms","Promise","resolve","setTimeout","PersistenceCachePlugin","persistence","getFilePath","lastSync","currentCache","readFromStorage","reloadNecessary","_this$persistence$rel","crossPlatformLock","load","Date","getTime","writeToStorage","save","FilePersistence","create","fileLocation","filePersistence","filePath","createCacheFile","contents","writeFilePromise","writeFile","saveBuffer","readFilePromise","readFile","_this6","loadBuffer","_this8","deleteFilePromise","_this10","timeLastModified","statPromise","stat","_this14","stats","mtime","_this16","createFileDirectory","mkdirPromise","mkdir","dirname","_this18","recursive","Dpapi","require","FilePersistenceWithDataProtection","scope","optionalEntropy","Buffer","from","encryptedContents","protectData","length","unprotectData","KeychainPersistence","serviceName","accountName","setPassword","getPassword","deletePassword","LibSecretPersistence"],"mappings":"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"}